// ==UserScript==
// @name         ÂçóÁêÜÂ∑•ÊïôÂä°Â¢ûÂº∫Âä©Êâã
// @namespace    http://tampermonkey.net/
// @version      1.4
// @description  Âú®ÂêàÈÄÇÁöÑÂú∞ÊñπÊòæÁ§∫ËØæÁ®ãÂ§ßÁ∫≤„ÄÅÈÄâ‰øÆËØæÁ±ªÂà´ÂèäÈÄâ‰øÆËØæÂ≠¶ÂàÜÊÉÖÂÜµÔºåÂπ∂Ëá™Âä®Âà∑Êñ∞ÁôªÂΩïÁä∂ÊÄÅ
// @match        202.119.81.112/*
// @match        bkjw.njust.edu.cn/*
// @match        202.119.81.112:9080/*
// @match        202.119.81.113:9080/*
// @grant        GM_xmlhttpRequest
// @connect      jsdelivr.net
// @connect      njust.wiki
// @author       Light
// @license      MIT
// @supportURL   https://github.com/NJUST-OpenLib/NJUST-JWC-Enhance
// ==/UserScript==

// ==================== ËøúÁ®ãÊï∞ÊçÆÊ∫êÈÖçÁΩÆ ====================
// ÈÄâ‰øÆËØæÂàÜÁ±ªÊï∞ÊçÆÊ∫ê
const CATEGORY_URL = 'https://fastly.jsdelivr.net/npm/njust-jwc-enhance@latest/data/xxk.json';
// ËØæÁ®ãÂ§ßÁ∫≤Êï∞ÊçÆÊ∫ê
const OUTLINE_URL = 'https://fastly.jsdelivr.net/npm/njust-jwc-enhance@latest/data/kcdg.json';

// Â§áÁî®Êï∞ÊçÆÊ∫êÔºàÂ¶ÇÈúÄË¶ÅÂèØÂèñÊ∂àÊ≥®ÈáäÔºâQ
// const CATEGORY_URL = 'https://fastly.jsdelivr.net/gh/NJUST-OpenLib/NJUST-JWC-Enhance@latest/data/xxk.json';
// const OUTLINE_URL = 'https://fastly.jsdelivr.net/gh/NJUST-OpenLib/NJUST-JWC-Enhance@latest/data/kcdg.json';

(function () {
    'use strict';

    // ==================== ÈÖçÁΩÆÈÄâÈ°π ====================
    // Áî®Êà∑ÁïåÈù¢ÈÖçÁΩÆ
    const UI_CONFIG = {
        showNotifications: true  // ÊòØÂê¶ÊòæÁ§∫ÂâçÁ´ØÊèêÁ§∫Ê°Ü (true=ÊòæÁ§∫Ôºåfalse=ÈöêËóè)
                                // ËÆæÁΩÆ‰∏∫ false ÂèØÂÆåÂÖ®ÂÖ≥Èó≠ÊâÄÊúâÁä∂ÊÄÅÊèêÁ§∫Ê°Ü
                                // ËÆæÁΩÆ‰∏∫ true ÂàôÊ≠£Â∏∏ÊòæÁ§∫Âä†ËΩΩ„ÄÅÊàêÂäü„ÄÅÈîôËØØÁ≠âÊèêÁ§∫
    };

    // Ë∞ÉËØïÈÖçÁΩÆ
    const DEBUG_CONFIG = {
        enabled: false,          // ÊòØÂê¶ÂêØÁî®Ë∞ÉËØï
        level: 0,              // Ë∞ÉËØïÁ∫ßÂà´: 0=ÂÖ≥Èó≠Ôºå1=ÈîôËØØÔºå2=Ë≠¶ÂëäÔºå3=‰ø°ÊÅØÔºå4=ËØ¶ÁªÜ
        showCache: true        // ÊòØÂê¶ÊòæÁ§∫ÁºìÂ≠òÁõ∏ÂÖ≥Êó•Âøó
    };

    // ÁºìÂ≠òÈÖçÁΩÆ
    const CACHE_CONFIG = {
        enabled: true,         // ÊòØÂê¶ÂêØÁî®ÁºìÂ≠ò
        ttl: 30,            // ÁºìÂ≠òÁîüÂ≠òÊó∂Èó¥ (Áßí) - 1 Â∞èÊó∂
        prefix: 'njust_jwc_'  // ÁºìÂ≠òÈîÆÂâçÁºÄ
    };

    // ==================== Ë∞ÉËØïÁ≥ªÁªü ====================
    const Logger = {
        LEVELS: { ERROR: 1, WARN: 2, INFO: 3, DEBUG: 4 },

        log(level, message, ...args) {
            if (!DEBUG_CONFIG.enabled || level > DEBUG_CONFIG.level) return;

            const timestamp = new Date().toLocaleTimeString();
            const levelNames = ['', '‚ùå', '‚ö†Ô∏è', '‚ÑπÔ∏è', 'üîç'];
            const prefix = `[${timestamp}] ${levelNames[level]} [ÂçóÁêÜÂ∑•ÊïôÂä°Âä©Êâã]`;

            console.log(prefix, message, ...args);

            // ÂØπ‰∫é INFO Á∫ßÂà´ÁöÑÊ∂àÊÅØÔºåÂêåÊó∂ÈÄöËøáÁä∂ÊÄÅÊèêÁ§∫Ê°ÜÊòæÁ§∫ÔºàÂ¶ÇÊûúÂêØÁî®Ôºâ
            if (level === this.LEVELS.INFO && UI_CONFIG.showNotifications && typeof StatusNotifier !== 'undefined' && StatusNotifier.show) {
                try {
                    // ÊèêÂèñÁ∫ØÊñáÊú¨Ê∂àÊÅØÔºåÂéªÈô§Ë°®ÊÉÖÁ¨¶Âè∑ÂâçÁºÄ
                    let cleanMessage = message.replace(/^[üéØüöÄüìäüéìüö™üíæ‚úÖüóëÔ∏è‚è∞‚ùåüîç‚ö†Ô∏è‚ÑπÔ∏è]+\s*/, '');

                    // Â¶ÇÊûúÊúâÈ¢ùÂ§ñÂèÇÊï∞ÔºåÂ∞ÜÂÖ∂Ê†ºÂºèÂåñÂπ∂Ê∑ªÂä†Âà∞Ê∂àÊÅØ‰∏≠
                    if (args.length > 0) {
                        const formattedArgs = args.map(arg => {
                            if (typeof arg === 'object' && arg !== null) {
                                try {
                                    // ÂÆâÂÖ®ÁöÑÂØπË±°Â∫èÂàóÂåñÔºåÈÅøÂÖçÂæ™ÁéØÂºïÁî®
                                    const seen = new WeakSet();
                                    const jsonStr = JSON.stringify(arg, (key, value) => {
                                        if (typeof value === 'object' && value !== null) {
                                            if (seen.has(value)) {
                                                return '[Circular Reference]';
                                            }
                                            seen.add(value);
                                        }
                                        return value;
                                    }, 0);

                                    // Â¶ÇÊûú JSON Â≠óÁ¨¶‰∏≤Â§™ÈïøÔºåËøõË°åÈÄÇÂΩìÊ†ºÂºèÂåñ
                                    if (jsonStr.length > 200) {
                                        // ÂØπ‰∫éÈïøÂØπË±°Ôºå‰ΩøÁî®Êõ¥Á¥ßÂáëÁöÑÊ†ºÂºèÔºåÈôêÂà∂Ê∑±Â∫¶
                                        return Object.entries(arg)
                                            .slice(0, 10) // ÈôêÂà∂ÊòæÁ§∫Ââç 10 ‰∏™Â±ûÊÄß
                                            .map(([key, value]) => {
                                                let valueStr;
                                                if (typeof value === 'object' && value !== null) {
                                                    valueStr = '[Object]';
                                                } else {
                                                    valueStr = String(value).slice(0, 50); // ÈôêÂà∂ÂÄºÈïøÂ∫¶
                                                }
                                                return `${key}: ${valueStr}`;
                                            })
                                            .join(', ') + (Object.keys(arg).length > 10 ? '...' : '');
                                    } else {
                                        // ÁßªÈô§ JSON ÁöÑËä±Êã¨Âè∑Ôºå‰ΩøÂÖ∂Êõ¥ÊòìËØª
                                        return jsonStr.replace(/^{|}$/g, '').replace(/"/g, '');
                                    }
                                } catch (e) {
                                    // Â¶ÇÊûú JSON.stringify Â§±Ë¥•Ôºå‰ΩøÁî®ÂÆâÂÖ®ÁöÑÂõûÈÄÄÊñπÊ≥ï
                                    try {
                                        return Object.entries(arg)
                                            .slice(0, 5) // ÈôêÂà∂Â±ûÊÄßÊï∞Èáè
                                            .map(([key, value]) => `${key}: ${String(value).slice(0, 30)}`)
                                            .join(', ') + (Object.keys(arg).length > 5 ? '...' : '');
                                    } catch (e2) {
                                        return '[Object - Cannot Display]';
                                    }
                                }
                            }
                            return String(arg).slice(0, 100); // ÈôêÂà∂Â≠óÁ¨¶‰∏≤ÈïøÂ∫¶
                        }).join(' ');

                        cleanMessage += ' ' + formattedArgs;
                    }

                    StatusNotifier.show(cleanMessage, 'info');
                } catch (e) {
                    // ÈùôÈªòÂ§ÑÁêÜÁä∂ÊÄÅÊèêÁ§∫Ê°ÜÈîôËØØÔºåÈÅøÂÖçÂΩ±ÂìçÊó•ÂøóÂäüËÉΩ
                }
            }
        },

        error(message, ...args) { this.log(this.LEVELS.ERROR, message, ...args); },
        warn(message, ...args) { this.log(this.LEVELS.WARN, message, ...args); },
        info(message, ...args) { this.log(this.LEVELS.INFO, message, ...args); },
        debug(message, ...args) { this.log(this.LEVELS.DEBUG, message, ...args); }
    };

    // ==================== ÁºìÂ≠òÁ≥ªÁªü ====================
    const CacheManager = {
        // Ëé∑ÂèñÁºìÂ≠òÈîÆ
        getKey(url) {
            return CACHE_CONFIG.prefix + btoa(url).replace(/[^a-zA-Z0-9]/g, '');
        },

        // ËÆæÁΩÆÁºìÂ≠ò
        set(url, data) {
            if (!CACHE_CONFIG.enabled) return false;

            try {
                const cacheData = {
                    data: data,
                    timestamp: Date.now(),
                    ttl: CACHE_CONFIG.ttl * 1000,
                    url: url
                };

                const key = this.getKey(url);
                localStorage.setItem(key, JSON.stringify(cacheData));

                if (DEBUG_CONFIG.showCache) {
                    Logger.info(`üíæ ÁºìÂ≠òÂ∑≤‰øùÂ≠ò: ${url}`, {
                        key: key,
                        size: JSON.stringify(cacheData).length + ' bytes',
                        ttl: CACHE_CONFIG.ttl + 's'
                    });
                }

                return true;
            } catch (e) {
                Logger.error('ÁºìÂ≠ò‰øùÂ≠òÂ§±Ë¥•: ', e);
                return false;
            }
        },

        // Ëé∑ÂèñÁºìÂ≠ò
        get(url) {
            if (!CACHE_CONFIG.enabled) return null;

            try {
                const key = this.getKey(url);
                const cached = localStorage.getItem(key);

                if (!cached) {
                    if (DEBUG_CONFIG.showCache) {
                        Logger.debug(`‚ùå ÁºìÂ≠òÊú™ÂëΩ‰∏≠: ${url}`);
                    }
                    return null;
                }

                const cacheData = JSON.parse(cached);
                const now = Date.now();
                const age = (now - cacheData.timestamp) / 1000;
                const remaining = (cacheData.ttl - (now - cacheData.timestamp)) / 1000;

                // Ê£ÄÊü•ÊòØÂê¶ËøáÊúü
                if (now - cacheData.timestamp > cacheData.ttl) {
                    localStorage.removeItem(key);
                    if (DEBUG_CONFIG.showCache) {
                        Logger.warn(`‚è∞ ÁºìÂ≠òÂ∑≤ËøáÊúü: ${url}`, {
                            age: age.toFixed(1) + 's',
                            expired: (age - CACHE_CONFIG.ttl).toFixed(1) + 's ago'
                        });
                    }
                    return null;
                }

                if (DEBUG_CONFIG.showCache) {
                    Logger.info(`‚úÖ ÁºìÂ≠òÂëΩ‰∏≠: ${url}`, {
                        age: age.toFixed(1) + 's',
                        remaining: remaining.toFixed(1) + 's',
                        size: cached.length + ' bytes'
                    });
                }

                return cacheData.data;
            } catch (e) {
                Logger.error('ÁºìÂ≠òËØªÂèñÂ§±Ë¥•: ', e);
                return null;
            }
        },

        // Ê∏ÖÈô§ÊâÄÊúâÁºìÂ≠ò
        clear() {
            try {
                const keys = Object.keys(localStorage).filter(key =>
                    key.startsWith(CACHE_CONFIG.prefix)
                );

                keys.forEach(key => localStorage.removeItem(key));

                Logger.info(`üóëÔ∏è Â∑≤Ê∏ÖÈô§ ${keys.length} ‰∏™ÁºìÂ≠òÈ°π`);
                return keys.length;
            } catch (e) {
                Logger.error('Ê∏ÖÈô§ÁºìÂ≠òÂ§±Ë¥•: ', e);
                return 0;
            }
        },

        // Ëé∑ÂèñÁºìÂ≠òÁªüËÆ°‰ø°ÊÅØ
        getStats() {
            try {
                const keys = Object.keys(localStorage).filter(key =>
                    key.startsWith(CACHE_CONFIG.prefix)
                );

                let totalSize = 0;
                let validCount = 0;
                let expiredCount = 0;
                const now = Date.now();

                keys.forEach(key => {
                    try {
                        const cached = localStorage.getItem(key);
                        totalSize += cached.length;

                        const cacheData = JSON.parse(cached);
                        if (now - cacheData.timestamp > cacheData.ttl) {
                            expiredCount++;
                        } else {
                            validCount++;
                        }
                    } catch (e) {
                        expiredCount++;
                    }
                });

                return {
                    total: keys.length,
                    valid: validCount,
                    expired: expiredCount,
                    size: totalSize
                };
            } catch (e) {
                Logger.error('Ëé∑ÂèñÁºìÂ≠òÁªüËÆ°Â§±Ë¥•: ', e);
                return { total: 0, valid: 0, expired: 0, size: 0 };
            }
        }
    };

    // ==================== Áä∂ÊÄÅÊèêÁ§∫Ê°ÜÁ≥ªÁªü ====================
    const StatusNotifier = {
        container: null,
        messageQueue: [],
        messageId: 0,

        // ÂàùÂßãÂåñÁä∂ÊÄÅÊèêÁ§∫Ê°ÜÂÆπÂô®
        init() {
            if (!STATUS_CONFIG.enabled || this.container) return;

            // Á°Æ‰øù DOM Â∑≤ÂáÜÂ§áÂ•Ω
            if (!document.body) {
                setTimeout(() => this.init(), 50);
                return;
            }

            try {
                this.container = document.createElement('div');
                this.container.id = 'njustStatusNotifier';

                // Ê†πÊçÆÈÖçÁΩÆËÆæÁΩÆ‰ΩçÁΩÆ
                const positions = {
                    'top-left': { top: '20px', left: '20px', flexDirection: 'column' },
                    'top-right': { top: '20px', right: '20px', flexDirection: 'column' },
                    'bottom-left': { bottom: '20px', left: '20px', flexDirection: 'column-reverse' },
                    'bottom-right': { bottom: '20px', right: '20px', flexDirection: 'column-reverse' }
                };

                const pos = positions[STATUS_CONFIG.position] || positions['top-right'];

                this.container.style.cssText = `
                    position: fixed;
                    ${Object.entries(pos).filter(([k]) => k !== 'flexDirection').map(([k, v]) => `${k}: ${v}`).join('; ')};
                    display: flex;
                    flex-direction: ${pos.flexDirection};
                    gap: 8px;
                    z-index: 9999;
                    pointer-events: none;
                    max-width: 350px;
                `;

                document.body.appendChild(this.container);
            } catch (e) {
                console.error('StatusNotifier ÂàùÂßãÂåñÂ§±Ë¥•: ', e);
                this.container = null;
            }
        },

        // ÊòæÁ§∫Áä∂ÊÄÅÊ∂àÊÅØ
        show(message, type = 'info', duration = null) {
            if (!STATUS_CONFIG.enabled || !UI_CONFIG.showNotifications) return;

            try {
                this.init();

                // Á°Æ‰øùÂÆπÂô®Â∑≤ÂàõÂª∫
                if (!this.container) {
                    console.warn('StatusNotifier ÂÆπÂô®Êú™ÂàõÂª∫ÔºåË∑≥ËøáÊ∂àÊÅØÊòæÁ§∫');
                    return;
                }

                // Â¶ÇÊûúÊòØ loading Á±ªÂûãÁöÑÊ∂àÊÅØÔºåÂÖàÈöêËóè‰πãÂâçÁöÑ loading Ê∂àÊÅØ
                if (type === 'loading') {
                    const existingLoadingMessages = this.messageQueue.filter(m => m.type === 'loading');
                    existingLoadingMessages.forEach(m => this.hideMessage(m.id));
                }

                const messageElement = this.createMessageElement(message, type);
                const messageData = {
                    id: ++this.messageId,
                    element: messageElement,
                    type: type,
                    timestamp: Date.now()
                };

                this.messageQueue.push(messageData);
                this.container.appendChild(messageElement);

                // ÈôêÂà∂ÂêåÊó∂ÊòæÁ§∫ÁöÑÊ∂àÊÅØÊï∞Èáè
                this.limitMessages();

                // ÊòæÁ§∫Âä®Áîª
                requestAnimationFrame(() => {
                    if (messageElement.parentNode) {
                        messageElement.style.opacity = '1';
                        messageElement.style.transform = 'translateX(0)';
                    }
                });

                // Ëá™Âä®ÈöêËóèÈÄªËæë
                if (STATUS_CONFIG.autoHide && type !== 'loading') {
                    const hideTime = duration || this.getHideDelay(type);
                    setTimeout(() => this.hideMessage(messageData.id), hideTime);
                }
            } catch (e) {
                console.error('StatusNotifier ÊòæÁ§∫Ê∂àÊÅØÂ§±Ë¥•: ', e);
            }
        },

        // ÂàõÂª∫Ê∂àÊÅØÂÖÉÁ¥†
        createMessageElement(message, type) {
            const icons = {
                info: '‚ÑπÔ∏è',
                success: '‚úÖ',
                warning: '‚ö†Ô∏è',
                error: '‚ùå',
                loading: 'üîÑ'
            };

            const colors = {
                info: '#888',
                success: '#888',
                warning: '#888',
                error: '#888',
                loading: '#888'
            };

            const messageElement = document.createElement('div');
            messageElement.style.cssText = `
                background: ${colors[type] || colors.info};
                color: white;
                padding: 12px 16px;
                border-radius: 8px;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                font-size: 13px;
                opacity: 0;
                transform: translateX(${STATUS_CONFIG.position.includes('right') ? '20px' : '-20px'});
                transition: all 0.3s ease;
                pointer-events: auto;
                line-height: 1.4;
                cursor: pointer;
                position: relative;
                margin-bottom: 0;
            `;

            messageElement.innerHTML = `${icons[type] || icons.info} ${message}`;

            // ÁÇπÂáªÂÖ≥Èó≠ÂäüËÉΩ
            messageElement.addEventListener('click', () => {
                const messageData = this.messageQueue.find(m => m.element === messageElement);
                if (messageData) {
                    this.hideMessage(messageData.id);
                }
            });

            return messageElement;
        },

        // Ëé∑Âèñ‰∏çÂêåÁ±ªÂûãÊ∂àÊÅØÁöÑÈöêËóèÂª∂Ëøü
        getHideDelay(type) {
            const delays = {
                info: STATUS_CONFIG.infoDelay || 2000,     // info Ê∂àÊÅØÊòæÁ§∫Êõ¥‰πÖ
                success: STATUS_CONFIG.hideDelay || 2000,
                warning: STATUS_CONFIG.hideDelay || 2000,
                error: STATUS_CONFIG.hideDelay || 2000,
                loading: STATUS_CONFIG.hideDelay || 2000 // loading Ê∂àÊÅØ‰∏çËá™Âä®ÈöêËóè
            };
            return delays[type] || STATUS_CONFIG.hideDelay;
        },

        // ÈöêËóèÊåáÂÆöÊ∂àÊÅØ
        hideMessage(messageId) {
            const messageIndex = this.messageQueue.findIndex(m => m.id === messageId);
            if (messageIndex === -1) return;

            const messageData = this.messageQueue[messageIndex];
            const element = messageData.element;

            // Á´ãÂç≥‰ªéÈòüÂàó‰∏≠ÁßªÈô§ÔºåÈÅøÂÖç limitMessages ‰∏≠ÁöÑÂæ™ÁéØÈóÆÈ¢ò
            this.messageQueue.splice(messageIndex, 1);

            // ÈöêËóèÂä®Áîª
            element.style.opacity = '0';
            element.style.transform = `translateX(${STATUS_CONFIG.position.includes('right') ? '20px' : '-20px'})`;

            // Âª∂ËøüÁßªÈô§ DOM ÂÖÉÁ¥†
            setTimeout(() => {
                if (element.parentNode) {
                    element.parentNode.removeChild(element);
                }
            }, 300);
        },

        // ÈôêÂà∂ÂêåÊó∂ÊòæÁ§∫ÁöÑÊ∂àÊÅØÊï∞Èáè
        limitMessages() {
            // ÈÅøÂÖçÊó†ÈôêÂæ™ÁéØ: Âè™ÁßªÈô§Ë∂ÖÂá∫Êï∞ÈáèÁöÑÊ∂àÊÅØÔºå‰∏ç‰ΩøÁî® while Âæ™ÁéØ
            if (this.messageQueue.length > STATUS_CONFIG.maxMessages) {
                const excessCount = this.messageQueue.length - STATUS_CONFIG.maxMessages;
                // ÁßªÈô§ÊúÄÊóßÁöÑÊ∂àÊÅØ
                for (let i = 0; i < excessCount; i++) {
                    if (this.messageQueue.length > 0) {
                        const oldestMessage = this.messageQueue[0];
                        this.hideMessage(oldestMessage.id);
                    }
                }
            }
        },

        // ÈöêËóèÊâÄÊúâÊ∂àÊÅØ
        hide() {
            this.messageQueue.forEach(messageData => {
                this.hideMessage(messageData.id);
            });
        },

        // ÁßªÈô§Áä∂ÊÄÅÊèêÁ§∫Ê°Ü
        remove() {
            if (this.container) {
                this.container.remove();
                this.container = null;
                this.messageQueue = [];
            }
        }
    };

    // Áä∂ÊÄÅÊèêÁ§∫Ê°ÜÈÖçÁΩÆ
    const STATUS_CONFIG = {
        enabled: true,         // ÊòØÂê¶ÊòæÁ§∫Áä∂ÊÄÅÊèêÁ§∫
        autoHide: true,       // ÊòØÂê¶Ëá™Âä®ÈöêËóè
        hideDelay: 2000,      // ÈªòËÆ§Ëá™Âä®ÈöêËóèÂª∂Ëøü (ÊØ´Áßí)
        infoDelay: 2000,      // info Á±ªÂûãÊ∂àÊÅØÊòæÁ§∫Êó∂Èó¥ (ÊØ´Áßí)
        maxMessages: 5,       // ÂêåÊó∂ÊòæÁ§∫ÁöÑÊúÄÂ§ßÊ∂àÊÅØÊï∞Èáè
        position: 'top-right' // ‰ΩçÁΩÆ: top-left, top-right, bottom-left, bottom-right
    };

    // Âª∂ËøüÂàùÂßãÂåñÊó•ÂøóÔºåÈÅøÂÖçÂú® DOM Êú™ÂÆåÂÖ®Âä†ËΩΩÊó∂Âá∫Áé∞ÈóÆÈ¢ò
    function initializeLogging() {
        // Á°Æ‰øù DOM Â∑≤Âä†ËΩΩ
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initializeLogging);
            return;
        }

        // Âª∂ËøüÊâßË°åÔºåÈÅøÂÖç‰∏éÈ°µÈù¢ÂàùÂßãÂåñÂÜ≤Á™Å
        setTimeout(() => {
            try {
                Logger.info('üöÄ ÂçóÁêÜÂ∑•ÊïôÂä°Â¢ûÂº∫Âä©ÊâãÂ∑≤ÂêØÂä®', {
                    debug: DEBUG_CONFIG.enabled ? `Level ${DEBUG_CONFIG.level}` : 'ÂÖ≥Èó≠',
                    cache: CACHE_CONFIG.enabled ? `TTL ${CACHE_CONFIG.ttl}s` : 'ÂÖ≥Èó≠'
                });

                // ÊòæÁ§∫ÁºìÂ≠òÁªüËÆ°
                if (DEBUG_CONFIG.enabled && DEBUG_CONFIG.showCache) {
                    const stats = CacheManager.getStats();
                    Logger.info('üìä ÁºìÂ≠òÁªüËÆ°: ', {
                        ÊÄªÊï∞: stats.total,
                        ÊúâÊïà: stats.valid,
                        ËøáÊúü: stats.expired,
                        Â§ßÂ∞è: (stats.size / 1024).toFixed(1) + 'KB'
                    });
                }
            } catch (e) {
                console.error('ÂàùÂßãÂåñÊó•ÂøóÂ§±Ë¥•: ', e);
            }
        }, 100);
    }

    // Ë∞ÉÁî®ÂàùÂßãÂåñ
    initializeLogging();

    let courseCategoryMap = {};
    let courseOutlineMap = {};

    // Áªü‰∏ÄÂºπÁ™óÊ†∑ÂºèÂáΩÊï∞
    function createUnifiedModal(title, content, type = 'info') {
        // ÁßªÈô§ÂèØËÉΩÂ≠òÂú®ÁöÑÊóßÂºπÁ™ó
        const existingModal = document.getElementById('njustAssistantModal');
        if (existingModal) {
            existingModal.remove();
        }

        const container = document.createElement('div');
        container.id = 'njustAssistantModal';

        // Ê†πÊçÆÁ±ªÂûãËÆæÁΩÆ‰∏çÂêåÁöÑÊ∏êÂèòËâ≤
        let gradientColor;
        switch (type) {
            case 'warning':
                gradientColor = 'linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%)';
                break;
            case 'success':
                gradientColor = 'linear-gradient(135deg, #28a745 0%, #20c997 100%)';
                break;
            case 'info':
            default:
                gradientColor = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
                break;
        }

        container.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: ${gradientColor};
            border: none;
            border-radius: 15px;
            padding: 0;
            box-shadow: 0 10px 40px rgba(0,0,0,0.3);
            z-index: 10000;
            min-width: 200px;
            max-width: 500px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            overflow: hidden;
            animation: fadeIn 0.3s ease-out;
        `;

        container.innerHTML = `
            <div id="dragHandle" style="
                background: rgba(255,255,255,0.1);
                padding: 15px 20px;
                cursor: move;
                display: flex;
                justify-content: space-between;
                align-items: center;
                border-bottom: 1px solid rgba(255,255,255,0.2);
            ">
                <div style="color: white; font-weight: bold; font-size: 18px;">
                    üéì ${title}
                </div>
                <span style="
                    cursor: pointer;
                    color: rgba(255,255,255,0.8);
                    font-size: 18px;
                    padding: 2px 6px;
                    border-radius: 4px;
                    transition: background-color 0.2s;
                "
                onclick="this.closest('div').parentElement.remove()"
                onmouseover="this.style.backgroundColor='rgba(255,255,255,0.2)'"
                onmouseout="this.style.backgroundColor='transparent'">‚úï</span>
            </div>
            <div style="
                background: white;
                padding: 25px;
            ">
                ${content}
                <div style="
                    margin-top: 20px;
                    padding-top: 15px;
                    border-top: 1px solid #eee;
                    font-size: 12px;
                    color: #666;
                    line-height: 1.4;
                    text-align: center;
                ">
                    <div style="margin-bottom: 8px;">
                        <strong>ËØ∑Êü•Áúã
                        <a href="https://enhance.njust.wiki" target="_blank" style="color: #007bff; text-decoration: none;">ÂÆòÊñπÁΩëÁ´ô</a>
                      ‰ª•Ëé∑Âèñ‰ΩøÁî®ËØ¥Êòé</strong>
                        </div>
                    <div style="color: #ff6b6b; font-weight: bold; margin-bottom: 5px;">‚ö†Ô∏è ÂÖçË¥£Â£∞Êòé</div>
                    <div>Êú¨Â∑•ÂÖ∑‰ªÖ‰∏∫Â≠¶‰π†‰∫§ÊµÅ‰ΩøÁî®ÔºåÊï∞ÊçÆ‰ªÖ‰æõÂèÇËÄÉ„ÄÇ</div>
                   <div>ËØ∑‰ª•ÊïôÂä°Â§ÑÂÆòÁΩë‰ø°ÊÅØ‰∏∫ÂáÜÔºå‰ΩøÁî®Êú¨Â∑•ÂÖ∑‰∫ßÁîüÁöÑ‰ªª‰ΩïÂêéÊûúÂùáÁî±Áî®Êà∑Ëá™Ë°åÊâøÊãÖ„ÄÇ</div>
                </div>
            </div>
        `;

        // Ê∑ªÂä† CSS Âä®Áîª
        if (!document.getElementById('njustAssistantStyles')) {
            const style = document.createElement('style');
            style.id = 'njustAssistantStyles';
            style.textContent = `
                @keyframes fadeIn {
                    from { opacity: 0; transform: translate(-50%, -50%) scale(0.9); }
                    to { opacity: 1; transform: translate(-50%, -50%) scale(1); }
                }
            `;
            document.head.appendChild(style);
        }

        // Ê∑ªÂä†ÊãñÂä®ÂäüËÉΩ
        addDragFunctionality(container);

        document.body.appendChild(container);
        return container;
    }

    // ÊãñÂä®ÂäüËÉΩ
    function addDragFunctionality(container) {
        let isDragging = false;
        let currentX, currentY, initialX, initialY;
        let xOffset = 0, yOffset = 0;

        const dragHandle = container.querySelector('#dragHandle');

        function dragStart(e) {
            if (e.type === "touchstart") {
                initialX = e.touches[0].clientX - xOffset;
                initialY = e.touches[0].clientY - yOffset;
            } else {
                initialX = e.clientX - xOffset;
                initialY = e.clientY - yOffset;
            }
            if (e.target === dragHandle || dragHandle.contains(e.target)) {
                isDragging = true;
            }
        }

        function dragEnd(e) {
            initialX = currentX;
            initialY = currentY;
            isDragging = false;
        }

        function drag(e) {
            if (isDragging) {
                e.preventDefault();
                if (e.type === "touchmove") {
                    currentX = e.touches[0].clientX - initialX;
                    currentY = e.touches[0].clientY - initialY;
                } else {
                    currentX = e.clientX - initialX;
                    currentY = e.clientY - initialY;
                }
                xOffset = currentX;
                yOffset = currentY;
                container.style.transform = `translate(${currentX}px, ${currentY}px)`;
            }
        }

        dragHandle.addEventListener('mousedown', dragStart);
        document.addEventListener('mousemove', drag);
        document.addEventListener('mouseup', dragEnd);
        dragHandle.addEventListener('touchstart', dragStart, { passive: false });
        document.addEventListener('touchmove', drag, { passive: false });
        document.addEventListener('touchend', dragEnd, { passive: false });
    }

    // Ê£ÄÊµãÂº∫Êô∫ÁßëÊäÄÈ°µÈù¢
    function checkQiangzhiPage() {
        const currentUrl = window.location.href;
        const pageTitle = document.title;

        Logger.debug('üîç Ê£ÄÊµãÈ°µÈù¢Á±ªÂûã', {
            URL: currentUrl,
            Ê†áÈ¢ò: pageTitle
        });

        // Ê£ÄÊµãÊòØÂê¶‰∏∫Âº∫Êô∫ÁßëÊäÄÈ°µÈù¢‰∏îÊó†Ê≥ïÁôªÂΩï
        if (
            pageTitle.includes('Âº∫Êô∫ÁßëÊäÄÊïôÂä°Á≥ªÁªüÊ¶ÇÂøµÁâà')) {

            Logger.warn('‚ö†Ô∏è Ê£ÄÊµãÂà∞Âº∫Êô∫ÁßëÊäÄÊ¶ÇÂøµÁâàÈ°µÈù¢ÔºåÊòæÁ§∫ÁôªÂΩïÂºïÂØº');

            const content = `
                <div style="text-align: center; font-size: 16px; color: #333; margin-bottom: 20px; line-height: 1.6;">
                    <div style="font-size: 20px; margin-bottom: 15px;">üö´ ËØ•È°µÈù¢Êó†Ê≥ïÁôªÂΩï</div>

                    <div style="margin-top: 10px;">ËØ∑ËΩ¨Âêë‰ª•‰∏ãÊ≠£Á°ÆÁöÑÁôªÂΩïÈ°µÈù¢:</div>
                </div>
                <div style="text-align: center; margin: 20px 0;">
                    <div style="margin: 10px 0;">
                        <a href="https://www.njust.edu.cn/" target="_blank" style="
                            display: inline-block;
                            background: #28a745;
                            color: white;
                            padding: 12px 20px;
                            text-decoration: none;
                            border-radius: 8px;
                            margin: 5px;
                            font-weight: bold;
                            transition: background-color 0.2s;
                        " onmouseover="this.style.backgroundColor='#218838'" onmouseout="this.style.backgroundColor='#28a745'">
                            üè´ Êô∫ÊÖßÁêÜÂ∑•ÁôªÂΩïÈ°µÈù¢
                        </a>
                    </div>
                    <div style="margin: 10px 0;">
                        <a href="http://202.119.81.113:8080/" target="_blank" style="
                            display: inline-block;
                            background: #007bff;
                            color: white;
                            padding: 12px 20px;
                            text-decoration: none;
                            border-radius: 8px;
                            margin: 5px;
                            font-weight: bold;
                            transition: background-color 0.2s;
                        " onmouseover="this.style.backgroundColor='#0056b3'" onmouseout="this.style.backgroundColor='#007bff'">
                            üîó ÊïôÂä°Â§ÑÁôªÂΩïÈ°µÈù¢
                        </a>
                    </div>
                </div>
                <div style="
                    margin-top: 15px;
                    padding: 10px;
                    background: #f8f9fa;
                    border-radius: 6px;
                    font-size: 14px;
                    color: #666;
                    text-align: center;
                ">
                    üí° ÊèêÁ§∫:<br>
                    Âº∫Êô∫ÁßëÊäÄÊïôÂä°Á≥ªÁªüÊ¶ÇÂøµÁâàÊòØÊó†Ê≥ïÁôªÈôÜÁöÑ„ÄÇ<br>
                    ËØ∑‰ΩøÁî®‰∏äËø∞ÈìæÊé•Ë∑≥ËΩ¨Âà∞Ê≠£Á°ÆÁöÑÁôªÂΩïÈ°µÈù¢Ôºå<br>
                    ÁôªÂΩïÂêéÂèØÊ≠£Â∏∏‰ΩøÁî®ÊïôÂä°Á≥ªÁªüÂäüËÉΩ<br>
                    È™åËØÅÁ†ÅÂå∫ÂàÜÂ§ßÂ∞èÂÜôÔºåÂ§ßÈÉ®ÂàÜÊÉÖÂÜµ‰∏ãÂùá‰∏∫Â∞èÂÜô
                </div>
            `;

            createUnifiedModal('ÂçóÁêÜÂ∑•ÊïôÂä°Â¢ûÂº∫Âä©Êâã', content, 'warning');
            return true;
        }
        return false;
    }

    function loadJSON(url) {
        return new Promise((resolve, reject) => {
            Logger.debug(`üì° ËØ∑Ê±ÇÊï∞ÊçÆ: ${url}`);

            // Â∞ùËØï‰ªéÁºìÂ≠òËé∑ÂèñÊï∞ÊçÆ
            const cachedData = CacheManager.get(url);
            if (cachedData) {
                Logger.debug(`üéØ ‰ΩøÁî®ÁºìÂ≠òÊï∞ÊçÆ: ${url}`);

                // ÊòæÁ§∫ÁºìÂ≠òÂëΩ‰∏≠Áä∂ÊÄÅ
                const fileName = url.includes('xxk') ? 'ÈÄâ‰øÆËØæÂàÜÁ±ª' : 'ËØæÁ®ãÂ§ßÁ∫≤';
                StatusNotifier.show(`‰ªéÁºìÂ≠òËØªÂèñ${fileName}Êï∞ÊçÆÊàêÂäü`, 'success');

                resolve(cachedData);
                return;
            }

            // ÁºìÂ≠òÊú™ÂëΩ‰∏≠ÔºåÂèëËµ∑ÁΩëÁªúËØ∑Ê±Ç
            Logger.info(`üåê ÂèëËµ∑ÁΩëÁªúËØ∑Ê±Ç: ${url}`);
            const startTime = Date.now();

            // ÊòæÁ§∫Âä†ËΩΩÁä∂ÊÄÅ
            const fileName = url.includes('xxk') ? 'ÈÄâ‰øÆËØæÂàÜÁ±ª' : 'ËØæÁ®ãÂ§ßÁ∫≤';
        //   StatusNotifier.show(`Ê≠£Âú®‰ªéËøúÁ®ãÂä†ËΩΩ${fileName}Êï∞ÊçÆ...`, 'info', 0);

            GM_xmlhttpRequest({
                method: "GET",
                url,
                onload: function (response) {
                    const loadTime = Date.now() - startTime;

                    try {
                        const json = JSON.parse(response.responseText);

                        // ‰øùÂ≠òÂà∞ÁºìÂ≠ò
                        const cached = CacheManager.set(url, json);

                        Logger.info(`‚úÖ ËØ∑Ê±ÇÊàêÂäü: ${url}`, {
                            ËÄóÊó∂: loadTime + 'ms',
                            Â§ßÂ∞è: response.responseText.length + ' bytes',
                            ÁºìÂ≠ò: cached ? 'Â∑≤‰øùÂ≠ò' : '‰øùÂ≠òÂ§±Ë¥•'
                        });

                        // ÊòæÁ§∫ÊàêÂäüÁä∂ÊÄÅ
                        StatusNotifier.show(`‰ªéËøúÁ®ãÂä†ËΩΩ${fileName}ÊàêÂäü (${loadTime}ms)`, 'success');

                        resolve(json);
                    } catch (e) {
                        Logger.error(`‚ùå JSON Ëß£ÊûêÂ§±Ë¥•: ${url}`, e);
                        StatusNotifier.show(`${fileName}Êï∞ÊçÆËß£ÊûêÂ§±Ë¥•`, 'error');
                        reject(e);
                    }
                },
                onerror: function (err) {
                    const loadTime = Date.now() - startTime;
                    Logger.error(`‚ùå ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•: ${url}`, {
                        ËÄóÊó∂: loadTime + 'ms',
                        ÈîôËØØ: err
                    });
                    StatusNotifier.show(`${fileName}Êï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•`, 'error', 4000);
                    reject(err);
                }
            });
        });
    }

    function buildCourseMaps(categoryList, outlineList) {
        Logger.debug('üî® ÂºÄÂßãÊûÑÂª∫ËØæÁ®ãÊò†Â∞ÑË°®');

        let categoryCount = 0;
        let outlineCount = 0;

        categoryList.forEach(item => {
            if (item.course_code && item.category) {
                courseCategoryMap[item.course_code.trim()] = item.category;
                categoryCount++;
            }
        });

        outlineList.forEach(item => {
            if (item.course_code && item.id) {
                courseOutlineMap[item.course_code.trim()] = item.id;
                outlineCount++;
            }
        });

        Logger.info('üìã ËØæÁ®ãÊò†Â∞ÑË°®ÊûÑÂª∫ÂÆåÊàê', {
            ÈÄâ‰øÆËØæÁ±ªÂà´: categoryCount + 'Êù°',
            ËØæÁ®ãÂ§ßÁ∫≤: outlineCount + 'Êù°',
            ÊÄªÊï∞ÊçÆ: (categoryCount + outlineCount) + 'Êù°'
        });
    }

    function createCreditSummaryWindow() {
        // ‰ΩøÁî®Áªü‰∏ÄÁöÑÂºπÁ™óÊ†∑ÂºèÔºå‰ΩÜ‰øùÊåÅÂéüÊúâÁöÑÂõ∫ÂÆö‰ΩçÁΩÆÂíåÊãñÂä®ÂäüËÉΩ
        const container = document.createElement('div');
        container.id = 'creditSummaryWindow';
        container.style.cssText = `
            position: fixed;
            top: 40px;
            right: 40px;
            background: #fff;
            border: 1px solid #e0e0e0;
            border-radius: 14px;
            padding: 0;
            box-shadow: 0 8px 32px rgba(0,0,0,0.13);
            z-index: 9999;
            min-width: 420px;
            max-width: 520px;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            overflow: hidden;
        `;

        container.innerHTML = `
            <div id="creditDragHandle" style="
                background: #f5f6fa;
                padding: 14px 22px;
                cursor: move;
                display: flex;
                justify-content: space-between;
                align-items: center;
                border-bottom: 1px solid #e0e0e0;
            ">
                <div style="color: #333; font-weight: 600; font-size: 17px; letter-spacing: 1px;">
                    üéì ÂçóÁêÜÂ∑•ÊïôÂä°Â¢ûÂº∫Âä©Êâã
                </div>
                <span style="
                    cursor: pointer;
                    color: #888;
                    font-size: 18px;
                    padding: 2px 8px;
                    border-radius: 4px;
                    transition: background-color 0.2s;
                "
                onclick="this.closest('div').parentElement.remove()"
                onmouseover="this.style.backgroundColor='#e0e0e0'"
                onmouseout="this.style.backgroundColor='transparent'">‚úï</span>
            </div>
            <div style="
                background: #fff;
                padding: 18px 22px 10px 22px;
                max-height: 540px;
                overflow-y: auto;
            ">
                <div id="creditSummary"></div>
                <div style="
                    margin-top: 18px;
                    padding-top: 12px;
                    border-top: 1px solid #e0e0e0;
                    font-size: 13px;
                    color: #888;
                    line-height: 1.6;
                    text-align: left;
                ">
                 <div style="color: #e67e22; font-weight: 500; margin-bottom: 5px;">‚ö†Ô∏è ÁâπÂà´Â£∞Êòé</div>
                    <div>ÈÄâ‰øÆËØæÁ±ªÂà´ÂèØËÉΩÂèëÁîüÂèòÂåñÔºå‰ªÖ‰æõÂèÇËÄÉ„ÄÇ<br>Êú¨Â∑•ÂÖ∑ÂèØËÉΩÂõ†‰∏∫ÊïôÂä°Â§ÑÊîπÁâàËÄå‰∏çÂèØÈù†Ôºå‰∏çÂØπÊï∞ÊçÆÂáÜÁ°ÆÊÄßË¥üË¥£</div>
                    <div style="margin-bottom: 8px;">
                        <span>ËØ∑Êü•Áúã <a href="https://enhance.njust.wiki" target="_blank" style="color: #007bff; text-decoration: none;">ÂçóÁêÜÂ∑•ÊïôÂä°Â¢ûÂº∫Âä©ÊâãÂÆòÊñπÁΩëÁ´ô</a> ‰ª•Ëé∑Âèñ‰ΩøÁî®ËØ¥Êòé</span>
                    </div>
                </div>
            </div>
        `;

        // Ê∑ªÂä†ÊãñÂä®ÂäüËÉΩ
        let isDragging = false;
        let currentX, currentY, initialX, initialY;
        let xOffset = 0, yOffset = 0;

        const dragHandle = container.querySelector('#creditDragHandle');

        function dragStart(e) {
            if (e.type === "touchstart") {
                initialX = e.touches[0].clientX - xOffset;
                initialY = e.touches[0].clientY - yOffset;
            } else {
                initialX = e.clientX - xOffset;
                initialY = e.clientY - yOffset;
            }
            if (e.target === dragHandle || dragHandle.contains(e.target)) {
                isDragging = true;
            }
        }

        function dragEnd(e) {
            initialX = currentX;
            initialY = currentY;
            isDragging = false;
        }

        function drag(e) {
            if (isDragging) {
                e.preventDefault();
                if (e.type === "touchmove") {
                    currentX = e.touches[0].clientX - initialX;
                    currentY = e.touches[0].clientY - initialY;
                } else {
                    currentX = e.clientX - initialX;
                    currentY = e.clientY - initialY;
                }
                xOffset = currentX;
                yOffset = currentY;
                container.style.transform = `translate(${currentX}px, ${currentY}px)`;
            }
        }

        dragHandle.addEventListener('mousedown', dragStart);
        document.addEventListener('mousemove', drag);
        document.addEventListener('mouseup', dragEnd);
        dragHandle.addEventListener('touchstart', dragStart, { passive: false });
        document.addEventListener('touchmove', drag, { passive: false });
        document.addEventListener('touchend', dragEnd, { passive: false });

        document.body.appendChild(container);
        return container;
    }

    function updateCreditSummary() {
        Logger.debug('üìä ÂºÄÂßãÊõ¥Êñ∞Â≠¶ÂàÜÁªüËÆ°');
        const creditSummaryDiv = document.getElementById('creditSummary');
        if (!creditSummaryDiv) {
            Logger.warn('‚ö†Ô∏è Êú™ÊâæÂà∞Â≠¶ÂàÜÁªüËÆ°ÂÆπÂô®');
            return;
        }

        const creditsByType = {}; // ÊåâËØæÁ®ãÁ±ªÂûãÔºàÈÄöËØÜÊïôËÇ≤ËØæÁ≠âÔºâÁªüËÆ°
        const creditsByCategory = {}; // ÊåâÈÄâ‰øÆËØæÁ±ªÂà´ÁªüËÆ°
        const tables = document.querySelectorAll('table');

        tables.forEach(table => {
            const rows = table.querySelectorAll('tr');
            rows.forEach(row => {
                const tds = row.querySelectorAll('td');
                if (tds.length >= 11) {
                    const courseCode = tds[2].textContent.trim();
                    const credit = parseFloat(tds[6].textContent) || 0;
                    const courseType = tds[10].textContent.trim(); // ËØæÁ®ãÁ±ªÂûãÔºàÈÄöËØÜÊïôËÇ≤ËØæÁ≠âÔºâ

                    // ‰ªéÈ°µÈù¢‰∏äÂ∑≤ÊòæÁ§∫ÁöÑÁ±ªÂà´‰ø°ÊÅØ‰∏≠ÊèêÂèñÈÄâ‰øÆËØæÁ±ªÂà´
                    const categoryDiv = tds[2].querySelector('[data-category-inserted]');
                    let category = null;
                    if (categoryDiv) {
                        // Áõ¥Êé•Ëé∑ÂèñÊñáÊú¨ÂÜÖÂÆπÔºåÂõ†‰∏∫Áé∞Âú®Âè™ÊòæÁ§∫Á±ªÂà´ÂêçÁß∞
                        category = categoryDiv.textContent.trim();
                        // Â¶ÇÊûúÊñáÊú¨‰∏∫Á©∫ÊàñËÄÖ‰∏çÊòØÊúâÊïàÁöÑÁ±ªÂà´ÔºåÂàôËÆæ‰∏∫ null
                        if (!category || category.length === 0) {
                            category = null;
                        }
                    }

                    // ÊåâËØæÁ®ãÁ±ªÂûãÁªüËÆ°
                    if (courseType) {
                        if (!creditsByType[courseType]) {
                            creditsByType[courseType] = {
                                credits: 0,
                                count: 0
                            };
                        }
                        creditsByType[courseType].credits += credit;
                        creditsByType[courseType].count += 1;
                    }

                    // ÊåâÈÄâ‰øÆËØæÁ±ªÂà´ÁªüËÆ°
                    if (category) {
                        if (!creditsByCategory[category]) {
                            creditsByCategory[category] = {
                                credits: 0,
                                count: 0
                            };
                        }
                        creditsByCategory[category].credits += credit;
                        creditsByCategory[category].count += 1;
                    }
                }
            });
        });

        // ËÆ°ÁÆóÊÄªËÆ°
        const totalCreditsByType = Object.values(creditsByType).reduce((sum, data) => sum + data.credits, 0);
        const totalCountByType = Object.values(creditsByType).reduce((sum, data) => sum + data.count, 0);
        const totalCreditsByCategory = Object.values(creditsByCategory).reduce((sum, data) => sum + data.credits, 0);
        const totalCountByCategory = Object.values(creditsByCategory).reduce((sum, data) => sum + data.count, 0);

        Logger.debug('üìà Â≠¶ÂàÜÁªüËÆ°ÁªìÊûú', {
            ËØæÁ®ãÁ±ªÂûãÊï∞: Object.keys(creditsByType).length,
            ÈÄâ‰øÆËØæÁ±ªÂà´Êï∞: Object.keys(creditsByCategory).length,
            ÊÄªÂ≠¶ÂàÜ: totalCreditsByType.toFixed(1),
            ÊÄªËØæÁ®ãÊï∞: totalCountByType
        });

        // ÁîüÊàê HTML - Ë°®Ê†ºÊ†∑ÂºèÂ∏ÉÂ±Ä
        let summaryHTML = '<div style="border-bottom: 1px solid #e0e0e0; margin-bottom: 12px; padding-bottom: 10px;">';
        summaryHTML += '<div style="margin-bottom: 8px; font-size: 15px; color: #222; font-weight: 600; letter-spacing: 0.5px;">üìä ÊåâËØæÁ®ãÁ±ªÂûãÁªüËÆ°</div>';
        // ÊÄªËÆ°Ë°å
        summaryHTML += `<div style="display: grid; grid-template-columns: 2fr 1fr 1fr; gap: 6px; padding: 2px 0; align-items: center; background: #f7f7fa; border-radius: 4px; padding: 4px 6px; margin-bottom: 4px;">
            <span style="color: #007bff; font-weight: 600; font-size: 13px; text-align: left;">ÊÄªËÆ°</span>
            <span style="font-weight: 600; color: #007bff; font-size: 13px; text-align: left;">${totalCreditsByType.toFixed(1)} Â≠¶ÂàÜ</span>
            <span style="color: #007bff; font-weight: 600; font-size: 13px; text-align: left;">${totalCountByType} Èó®</span>
        </div>`;
        // ËØæÁ®ãÁ±ªÂûãË°®Ê†º
        summaryHTML += '<div style="display: grid; gap: 2px;">';
        for (const [type, data] of Object.entries(creditsByType)) {
            summaryHTML += `<div style="display: grid; grid-template-columns: 2fr 1fr 1fr; gap: 6px; padding: 2px 0; align-items: center;">
                <span style="color: #444; font-weight: 400; font-size: 13px; text-align: left;">${type}</span>
                <span style="font-weight: 400; color: #333; font-size: 13px; text-align: left;">${data.credits.toFixed(1)} Â≠¶ÂàÜ</span>
                <span style="color: #888; font-size: 13px; text-align: left;">${data.count} Èó®</span>
            </div>`;
        }
        summaryHTML += '</div>';
        summaryHTML += '</div>';

        if (Object.keys(creditsByCategory).length > 0) {
            summaryHTML += '</div><div style="margin-top: 16px;">';
            summaryHTML += '<div style="margin-bottom: 8px; font-size: 15px; color: #222; font-weight: 600; letter-spacing: 0.5px;">üè∑Ô∏è ÊåâÈÄâ‰øÆËØæÁ±ªÂà´ÁªüËÆ°</div>';
            // ÊÄªËÆ°Ë°å
            summaryHTML += `<div style="display: grid; grid-template-columns: 2fr 1fr 1fr; gap: 6px; padding: 2px 0; align-items: center; background: #f7f7fa; border-radius: 4px; padding: 4px 6px; margin-bottom: 4px;">
                <span style="color: 007bff; font-weight: 600; font-size: 13px; text-align: left;">ÊÄªËÆ°</span>
                <span style="font-weight: 600; color: #007bff; font-size: 13px; text-align: left;">${totalCreditsByCategory.toFixed(1)} Â≠¶ÂàÜ</span>
                <span style="color: #007bff; font-weight: 600; font-size: 13px; text-align: left;">${totalCountByCategory} Èó®</span>
            </div>`;
            // ÈÄâ‰øÆËØæÁ±ªÂà´Ë°®Ê†º
            summaryHTML += '<div style="display: grid; gap: 2px;">';
            for (const [category, data] of Object.entries(creditsByCategory)) {
                summaryHTML += `<div style="display: grid; grid-template-columns: 2fr 1fr 1fr; gap: 6px; padding: 2px 0; align-items: center;">
                    <span style="color: #444; font-weight: 400; font-size: 13px; text-align: left;">${category}</span>
                    <span style="font-weight: 400; color: #333; font-size: 13px; text-align: left;">${data.credits.toFixed(1)} Â≠¶ÂàÜ</span>
                    <span style="color: #888; font-size: 13px; text-align: left;">${data.count} Èó®</span>
                </div>`;
            }
            summaryHTML += '</div>';
        }
        summaryHTML += '</div>';

        creditSummaryDiv.innerHTML = summaryHTML || 'ÊöÇÊó†Êï∞ÊçÆ';
        Logger.debug('‚úÖ Â≠¶ÂàÜÁªüËÆ°Êõ¥Êñ∞ÂÆåÊàê');
    }

    function processAllTables() {
        Logger.debug('üîç ÂºÄÂßãÂ§ÑÁêÜÈ°µÈù¢Ë°®Ê†º');
        const tables = document.querySelectorAll('table');
        const isGradePage = window.location.pathname.includes('/njlgdx/kscj/cjcx_list');
        const isSchedulePage = window.location.pathname.includes('xskb_list.do') &&
                              document.title.includes('Â≠¶ÊúüÁêÜËÆ∫ËØæË°®');

        Logger.debug(`üìã ÊâæÂà∞ ${tables.length} ‰∏™Ë°®Ê†º`, {
            ÊàêÁª©È°µÈù¢: isGradePage,
            ËØæË°®È°µÈù¢: isSchedulePage
        });

        let processedTables = 0;
        let processedRows = 0;
        let enhancedCourses = 0;

        tables.forEach(table => {
            // Â¶ÇÊûúÊòØËØæË°®È°µÈù¢ÔºåÂè™Â§ÑÁêÜ id="dataList" ÁöÑË°®Ê†º
            if (isSchedulePage && table.id !== 'dataList') {
                Logger.debug('‚è≠Ô∏è Ë∑≥ËøáÈùû dataList Ë°®Ê†º');
                return;
            }

            const rows = table.querySelectorAll('tr');
            Logger.debug(`üìã Â§ÑÁêÜË°®Ê†º (${rows.length} Ë°å)`, {
                Ë°®Ê†ºID: table.id || 'Êó† ID',
                ÊàêÁª©È°µÈù¢: isGradePage,
                ËØæË°®È°µÈù¢: isSchedulePage
            });

            processedTables++;

            rows.forEach(row => {
                const tds = row.querySelectorAll('td');
                if (tds.length < 3) return;

                processedRows++;

                let courseCodeTd;
                let courseCode;

                if (isGradePage) {
                    courseCodeTd = tds[2]; // ÊàêÁª©È°µÈù¢ËØæÁ®ã‰ª£Á†ÅÂú®Á¨¨3Âàó
                    courseCode = courseCodeTd.textContent.trim();
                } else if (isSchedulePage) {
                    courseCodeTd = tds[1]; // ËØæË°®È°µÈù¢ËØæÁ®ã‰ª£Á†ÅÂú®Á¨¨2Âàó
                    courseCode = courseCodeTd.textContent.trim();
                } else {
                    courseCodeTd = tds[1];
                    const parts = courseCodeTd.innerHTML.split('<br>');
                    if (parts.length === 2) {
                        courseCode = parts[1].trim();
                    } else {
                        return;
                    }
                }

                Logger.debug(`üîç Â§ÑÁêÜËØæÁ®ã: ${courseCode}`);

                let courseEnhanced = false;

                // ÊèíÂÖ•Á±ªÂà´
                if (!courseCodeTd.querySelector('[data-category-inserted]')) {
                    const category = courseCategoryMap[courseCode];
                    if (category) {
                        const catDiv = document.createElement('div');
                        catDiv.setAttribute('data-category-inserted', '1');
                        catDiv.style.color = '#28a745';
                        catDiv.style.fontWeight = 'bold';
                        catDiv.style.marginTop = '4px';
                        // Âè™ÊòæÁ§∫Á±ªÂà´ÂêçÁß∞Ôºå‰∏çÊòæÁ§∫ÂâçÁºÄ
                        catDiv.textContent = category;
                        courseCodeTd.appendChild(catDiv);
                        Logger.debug(`‚úÖ Ê∑ªÂä†ËØæÁ®ãÁ±ªÂà´: ${category}`);
                        courseEnhanced = true;
                    }
                }

                // ÊèíÂÖ•ËÄÅÂ∏àËØ¥ÊòéÔºàÊù•Ëá™ titleÔºå‰ªÖÂú®ÈùûÊàêÁª©È°µÈù¢ÂíåÈùûËØæË°®È°µÈù¢Ôºâ
                if (!isGradePage && !isSchedulePage && courseCodeTd.title && !courseCodeTd.querySelector('[data-title-inserted]')) {
                    const titleDiv = document.createElement('div');
                    titleDiv.setAttribute('data-title-inserted', '1');
                    titleDiv.style.color = '#666';
                    titleDiv.style.fontSize = '13   px';
                    titleDiv.style.marginTop = '4px';
                    titleDiv.style.fontStyle = 'italic';
                    titleDiv.textContent = `üìå ËÄÅÂ∏àËØ¥Êòé: ${courseCodeTd.title}`;
                    courseCodeTd.appendChild(titleDiv);
                    Logger.debug(`üìù Ê∑ªÂä†ËÄÅÂ∏àËØ¥Êòé`);
                    courseEnhanced = true;
                }

                // ÊèíÂÖ•ËØæÁ®ãÂ§ßÁ∫≤ÈìæÊé•
                if (!courseCodeTd.querySelector('[data-outline-inserted]')) {
                    const realId = courseOutlineMap[courseCode];
                    const outlineDiv = document.createElement('div');
                    outlineDiv.setAttribute('data-outline-inserted', '1');
                    outlineDiv.style.marginTop = '4px';

                    if (realId) {
                        const link = document.createElement('a');
                        link.href = `http://202.119.81.112:8080/kcxxAction.do?method=kcdgView&jx02id=${realId}&isentering=0`;
                        link.textContent = 'üìò Êü•ÁúãËØæÁ®ãÂ§ßÁ∫≤';
                        link.target = '_blank';
                        link.style.color = '#0077cc';
                        outlineDiv.appendChild(link);
                        Logger.debug(`üìò Ê∑ªÂä†ËØæÁ®ãÂ§ßÁ∫≤ÈìæÊé•`);
                        courseEnhanced = true;
                    } else {
                        outlineDiv.textContent = '‚ùå Êó†Â§ßÁ∫≤‰ø°ÊÅØ';
                        outlineDiv.style.color = 'gray';
                        Logger.debug(`‚ùå Êó†Â§ßÁ∫≤‰ø°ÊÅØ`);
                    }
                    courseCodeTd.appendChild(outlineDiv);
                }

                if (courseEnhanced) {
                    enhancedCourses++;
                }
            });
        });

        // ËæìÂá∫Â§ÑÁêÜÁªüËÆ°
        Logger.info('üìä Ë°®Ê†ºÂ§ÑÁêÜÁªüËÆ°', {
            Â§ÑÁêÜË°®Ê†ºÊï∞: processedTables,
            Â§ÑÁêÜË°åÊï∞: processedRows,
            Â¢ûÂº∫ËØæÁ®ãÊï∞: enhancedCourses
        });

        // Êõ¥Êñ∞Â≠¶ÂàÜÁªüËÆ°Ôºà‰ªÖÂú®ÊàêÁª©È°µÈù¢Ôºâ
        if (isGradePage) {
            Logger.debug('üìä Êõ¥Êñ∞Â≠¶ÂàÜÁªüËÆ°');
            updateCreditSummary();
        }

        Logger.debug('‚úÖ Ë°®Ê†ºÂ§ÑÁêÜÂÆåÊàê');
    }

    // ÁªüËÆ°ËøΩË∏™ËØ∑Ê±Ç
    /* function sendTrackingRequest() {
        try {
            // ÂèëÈÄÅËøΩË∏™ËØ∑Ê±ÇÔºåÁî®‰∫éÁªüËÆ°‰ΩøÁî®ÊÉÖÂÜµ
            GM_xmlhttpRequest({
                method: 'GET',
                url: 'https://manual.njust.wiki/test.html?from=enhancer',
                timeout: 5000,
                onload: function () {
                    // ËØ∑Ê±ÇÊàêÂäüÔºå‰∏çÂÅö‰ªª‰ΩïÂ§ÑÁêÜ
                },
                onerror: function () {
                    // ËØ∑Ê±ÇÂ§±Ë¥•ÔºåÈùôÈªòÂ§ÑÁêÜ
                },
                ontimeout: function () {
                    // ËØ∑Ê±ÇË∂ÖÊó∂ÔºåÈùôÈªòÂ§ÑÁêÜ
                }
            });
        } catch (e) {
            // ÈùôÈªòÂ§ÑÁêÜ‰ªª‰ΩïÈîôËØØ
        }
    } */

    // Ê£ÄÊµãÁôªÂΩïÈîôËØØÈ°µÈù¢Âπ∂Ëá™Âä®Â§ÑÁêÜ
    function checkLoginErrorAndRefresh() {
        const pageTitle = document.title;
        const pageContent = document.body ? document.body.textContent : '';
        
        // Ê£ÄÊµãÊòØÂê¶‰∏∫ÁôªÂΩïÈîôËØØÈ°µÈù¢
        const isLoginError = pageTitle.includes('Âá∫ÈîôÈ°µÈù¢') && 
                            (pageContent.includes('ÊÇ®ÁôªÂΩïÂêéËøáÈïøÊó∂Èó¥Ê≤°ÊúâÊìç‰Ωú') || 
                             pageContent.includes('ÊÇ®ÁöÑÁî®Êà∑ÂêçÂ∑≤ÁªèÂú®Âà´Â§ÑÁôªÂΩï') ||
                             pageContent.includes('ËØ∑ÈáçÊñ∞ËæìÂÖ•Â∏êÂè∑ÔºåÂØÜÁ†ÅÂêéÔºåÁªßÁª≠Êìç‰Ωú'));
        
        if (isLoginError) {
            Logger.warn('‚ö†Ô∏è Ê£ÄÊµãÂà∞ÁôªÂΩïË∂ÖÊó∂ÊàñÈáçÂ§çÁôªÂΩïÈîôËØØÈ°µÈù¢');
            
            // ÊòæÁ§∫Áî®Êà∑ÊèêÁ§∫
            if (UI_CONFIG.showNotifications) {
                StatusNotifier.show('Ê£ÄÊµãÂà∞ÁôªÂΩïË∂ÖÊó∂ÔºåÊ≠£Âú®Ëá™Âä®Âà∑Êñ∞ÁôªÂΩïÁä∂ÊÄÅ...', 'warning', 5000);
            }
            
            // Âº∫Âà∂Âà∑Êñ∞ÁôªÂΩïÁä∂ÊÄÅÔºàÂøΩÁï•Êó∂Èó¥Èó¥ÈöîÈôêÂà∂Ôºâ
            performLoginRefresh(true);
            
            return true;
        }
        
        return false;
    }
    
    // ÊâßË°åÁôªÂΩïÁä∂ÊÄÅÂà∑Êñ∞
    function performLoginRefresh(forceRefresh = false) {
        const currentUrl = window.location.href;
        
        try {
            // ÊûÑÂª∫Âà∑Êñ∞ URL - ‰ªéÂΩìÂâç URL ÊèêÂèñÂü∫Á°ÄÈÉ®ÂàÜ
            let baseUrl;
            if (currentUrl.includes('njlgdx/')) {
                baseUrl = currentUrl.substring(0, currentUrl.indexOf('njlgdx/'));
            } else {
                // Â¶ÇÊûúÂΩìÂâç URL ‰∏çÂåÖÂê´ njlgdxÔºåÂ∞ùËØï‰ªéÂüüÂêçÊûÑÂª∫
                const urlObj = new URL(currentUrl);
                baseUrl = `${urlObj.protocol}//${urlObj.host}/`;
            }
            
            const refreshUrl = baseUrl + 'njlgdx/pyfa/kcdgxz';
            
            Logger.info('üåê ÂáÜÂ§á‰ΩøÁî®ÈöêËóè iframe Âà∑Êñ∞ÁôªÂΩïÁä∂ÊÄÅ:', refreshUrl);
            
            // ÂàõÂª∫ÈöêËóèÁöÑ iframe Êù•Âä†ËΩΩÂà∑Êñ∞È°µÈù¢
            const iframe = document.createElement('iframe');
            iframe.style.cssText = `
                position: absolute;
                left: -9999px;
                top: -9999px;
                width: 1px;
                height: 1px;
                opacity: 0;
                visibility: hidden;
                border: none;
            `;
            iframe.src = refreshUrl;
            
            // Ê∑ªÂä†Âä†ËΩΩÂÆåÊàêÁõëÂê¨Âô®
            iframe.onload = function() {
                Logger.info('‚úÖ ÁôªÂΩïÁä∂ÊÄÅÂà∑Êñ∞ËØ∑Ê±ÇÂ∑≤ÂÆåÊàê');
                
                if (forceRefresh && UI_CONFIG.showNotifications) {
                    StatusNotifier.show('ÁôªÂΩïÁä∂ÊÄÅÂ∑≤Âà∑Êñ∞ÔºåËØ∑ÈáçÊñ∞Â∞ùËØïÊìç‰Ωú', 'success', 3000);
                }
                
                // Âª∂ËøüÁßªÈô§ iframeÔºåÁ°Æ‰øùËØ∑Ê±ÇÂÆåÂÖ®Â§ÑÁêÜ
                setTimeout(() => {
                    if (iframe.parentNode) {
                        iframe.parentNode.removeChild(iframe);
                        Logger.debug('üóëÔ∏è ÈöêËóè iframe Â∑≤Ê∏ÖÁêÜ');
                    }
                }, 1000);
            };
            
            // Ê∑ªÂä†ÈîôËØØÂ§ÑÁêÜ
            iframe.onerror = function() {
                Logger.warn('‚ö†Ô∏è ÁôªÂΩïÁä∂ÊÄÅÂà∑Êñ∞ËØ∑Ê±ÇÂ§±Ë¥•');
                if (iframe.parentNode) {
                    iframe.parentNode.removeChild(iframe);
                }
                
                if (forceRefresh && UI_CONFIG.showNotifications) {
                    StatusNotifier.show('ÁôªÂΩïÁä∂ÊÄÅÂà∑Êñ∞Â§±Ë¥•ÔºåËØ∑ÊâãÂä®ÈáçÊñ∞ÁÇπÂáªÈÄâËØæ‰∏≠ÂøÉ - ËØæÁ®ãÊÄªÂ∫ì', 'error', 5000);
                }
            };
            
            // Â∞Ü iframe Ê∑ªÂä†Âà∞È°µÈù¢
            document.body.appendChild(iframe);
            
            // ËÆæÁΩÆË∂ÖÊó∂Ê∏ÖÁêÜÔºåÈò≤Ê≠¢ iframe ÈïøÊó∂Èó¥Â≠òÂú®
            setTimeout(() => {
                if (iframe.parentNode) {
                    iframe.parentNode.removeChild(iframe);
                    Logger.debug('‚è∞ Ë∂ÖÊó∂Ê∏ÖÁêÜÈöêËóè iframe');
                }
            }, 10000); // 10 ÁßíË∂ÖÊó∂
            
        } catch (e) {
            Logger.error('‚ùå Ëá™Âä®Âà∑Êñ∞ÁôªÂΩïÁä∂ÊÄÅÂ§±Ë¥•:', e);
            if (forceRefresh && UI_CONFIG.showNotifications) {
                StatusNotifier.show('ÁôªÂΩïÁä∂ÊÄÅÂà∑Êñ∞Â§±Ë¥•ÔºåËØ∑ÊâãÂä®ÈáçÊñ∞ÁôªÂΩï', 'error', 5000);
            }
        }
    }

    // Ëá™Âä®Âà∑Êñ∞ÁôªÂΩïÁä∂ÊÄÅÂäüËÉΩ
    function autoRefreshLoginStatus() {
        const currentUrl = window.location.href;
        
        // Ê£ÄÊü•ÂΩìÂâçÈ°µÈù¢ URL ÊòØÂê¶ÂåÖÂê´ njlgdx/framework/main.jsp
        if (currentUrl.includes('njlgdx/framework/main.jsp')) {
            // Èò≤Ê≠¢È¢ëÁπÅËß¶Âèë - Ê£ÄÊü•‰∏äÊ¨°Âà∑Êñ∞Êó∂Èó¥
            const lastRefreshKey = 'njust_last_login_refresh';
            const lastRefreshTime = localStorage.getItem(lastRefreshKey);
            const now = Date.now();
            const refreshInterval = 5 * 60 * 1000; // 5 ÂàÜÈíüÈó¥Èöî
            
            if (lastRefreshTime && (now - parseInt(lastRefreshTime)) < refreshInterval) {
                Logger.debug('‚è≠Ô∏è Ë∑ùÁ¶ª‰∏äÊ¨°Âà∑Êñ∞‰∏çË∂≥5ÂàÜÈíüÔºåË∑≥ËøáÊú¨Ê¨°Âà∑Êñ∞');
                return;
            }
            
            Logger.info('üîÑ Ê£ÄÊµãÂà∞‰∏ªÊ°ÜÊû∂È°µÈù¢ÔºåÂáÜÂ§áÂà∑Êñ∞ÁôªÂΩïÁä∂ÊÄÅ');
            
            // ËÆ∞ÂΩïÊú¨Ê¨°Âà∑Êñ∞Êó∂Èó¥
            localStorage.setItem(lastRefreshKey, now.toString());
            
            // ‰ΩøÁî®Áªü‰∏ÄÁöÑÂà∑Êñ∞ÂáΩÊï∞
            performLoginRefresh(false);
        }
    }

    async function init() {
        try {
            Logger.info('üéØ ÂºÄÂßãÊâßË°å‰∏ªË¶ÅÈÄªËæë');
        //    StatusNotifier.show('ÂçóÁêÜÂ∑•ÊïôÂä°Âä©ÊâãÊ≠£Âú®ÂêØÂä®...', 'info');

            // ÂèëÈÄÅÁªüËÆ°ËøΩË∏™ËØ∑Ê±Ç
            sendTrackingRequest();

            // È¶ñÂÖàÊ£ÄÊµãÂº∫Êô∫ÁßëÊäÄÈ°µÈù¢
            if (checkQiangzhiPage()) {
                Logger.info('üö™ Âº∫Êô∫ÁßëÊäÄÈ°µÈù¢Ê£ÄÊµãÂÆåÊàêÔºåËÑöÊú¨ÈÄÄÂá∫');
                return; // Â¶ÇÊûúÊòØÂº∫Êô∫ÁßëÊäÄÈ°µÈù¢ÔºåÊòæÁ§∫ÊèêÁ§∫ÂêéÁõ¥Êé•ËøîÂõû
            }

            // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅËá™Âä®Âà∑Êñ∞ÁôªÂΩïÁä∂ÊÄÅ
            autoRefreshLoginStatus();
            
            // Ê£ÄÊµãÁôªÂΩïÈîôËØØÈ°µÈù¢Âπ∂Â§ÑÁêÜ
            checkLoginErrorAndRefresh();

            Logger.info('üì• ÂºÄÂßãÂä†ËΩΩËøúÁ®ãÊï∞ÊçÆ');
         //   StatusNotifier.show('Ê≠£Âú®Âä†ËΩΩËØæÁ®ãÊï∞ÊçÆ...', 'loading');

            const [categoryData, outlineData] = await Promise.all([
                loadJSON(CATEGORY_URL),
                loadJSON(OUTLINE_URL)
            ]);

            Logger.info('‚úÖ ËøúÁ®ãÊï∞ÊçÆÂä†ËΩΩÂÆåÊàêÔºåÂºÄÂßãÂàùÂßãÂåñÂäüËÉΩ');
          //  StatusNotifier.show('Ê≠£Âú®Ëß£ÊûêÊï∞ÊçÆ...', 'loading');
            buildCourseMaps(categoryData, outlineData);

            // Â¶ÇÊûúÊòØÊàêÁª©È°µÈù¢ÔºåÂàõÂª∫ÊÇ¨ÊµÆÁ™ó
            if (window.location.pathname.includes('/njlgdx/kscj/cjcx_list')) {
                Logger.debug('üìä Ê£ÄÊµãÂà∞ÊàêÁª©È°µÈù¢ÔºåÂàõÂª∫Â≠¶ÂàÜÁªüËÆ°Á™óÂè£');
                createCreditSummaryWindow();
            }

            Logger.debug('üîÑ ÂºÄÂßãÂ§ÑÁêÜÈ°µÈù¢Ë°®Ê†º');
        //StatusNotifier.show('Ê≠£Âú®Â§ÑÁêÜÈ°µÈù¢Ë°®Ê†º...', 'loading');
        processAllTables();
       // StatusNotifier.show('È°µÈù¢Ë°®Ê†ºÂ§ÑÁêÜÂÆåÊàê', 'success', 2000);

            Logger.debug('üëÄ ÂêØÂä®È°µÈù¢ÂèòÂåñÁõëÂê¨Âô®');
            let isProcessing = false; // Èò≤Ê≠¢Ê≠ªÂæ™ÁéØÁöÑÊ†áÂøó
            const observer = new MutationObserver((mutations) => {
                // Èò≤Ê≠¢Ê≠ªÂæ™ÁéØÔºöÂ¶ÇÊûúÊ≠£Âú®Â§ÑÁêÜ‰∏≠ÔºåË∑≥Ëøá
                if (isProcessing) {
                    return;
                }

                // Ê£ÄÊü•ÊòØÂê¶ÊúâÂÆûÈôÖÁöÑÂÜÖÂÆπÂèòÂåñÔºàÊéíÈô§Êàë‰ª¨Ëá™Â∑±Ê∑ªÂä†ÁöÑÂÖÉÁ¥†Ôºâ
                const hasRelevantChanges = mutations.some(mutation => {
                    // Â¶ÇÊûúÊòØÊàë‰ª¨Ê∑ªÂä†ÁöÑÊ†áËÆ∞ÂÖÉÁ¥†ÔºåÂøΩÁï•
                    if (mutation.type === 'childList') {
                        for (let node of mutation.addedNodes) {
                            if (node.nodeType === Node.ELEMENT_NODE) {
                                // Â¶ÇÊûúÊòØÊàë‰ª¨Ê∑ªÂä†ÁöÑÊ†áËÆ∞ÂÖÉÁ¥†ÔºåÂøΩÁï•Ëøô‰∏™ÂèòÂåñ
                                if (node.hasAttribute && (
                                    node.hasAttribute('data-category-inserted') ||
                                    node.hasAttribute('data-title-inserted') ||
                                    node.hasAttribute('data-outline-inserted')
                                )) {
                                    return false;
                                }
                                // Â¶ÇÊûúÊòØË°®Ê†ºÁõ∏ÂÖ≥ÁöÑÈáçË¶ÅÂèòÂåñÔºåÊâçÂ§ÑÁêÜ
                                if (node.tagName === 'TABLE' || node.tagName === 'TR' || node.tagName === 'TD') {
                                    return true;
                                }
                            }
                        }
                    }
                    return false;
                });

                if (hasRelevantChanges && !checkQiangzhiPage()) {
                    Logger.debug('üîÑ Ê£ÄÊµãÂà∞Áõ∏ÂÖ≥È°µÈù¢ÂèòÂåñÔºåÈáçÊñ∞Â§ÑÁêÜË°®Ê†º');
                    isProcessing = true;
                    try {
                  //      StatusNotifier.show('Ê≠£Âú®Êõ¥Êñ∞È°µÈù¢Ë°®Ê†º...', 'loading');
                        processAllTables();
                   //     StatusNotifier.show('È°µÈù¢Ë°®Ê†ºÊõ¥Êñ∞ÂÆåÊàê', 'success', 1500);
                    } finally {
                        // Âª∂ËøüÈáçÁΩÆÊ†áÂøóÔºåÁ°Æ‰øù DOM ‰øÆÊîπÂÆåÊàê
                        setTimeout(() => {
                            isProcessing = false;
                        }, 100);
                    }
                }
            });
            observer.observe(document.body, { childList: true, subtree: true });

            Logger.info('üéâ ËÑöÊú¨ÂàùÂßãÂåñÂÆåÊàê');
            StatusNotifier.show('ÂçóÁêÜÂ∑•ÊïôÂä°Â¢ûÂº∫Âä©ÊâãÂä†ËΩΩÊàêÂäüÔºÅ', 'success', 5000);

        } catch (err) {
            Logger.error('‚ùå ÂàùÂßãÂåñÂ§±Ë¥•:', err);
            StatusNotifier.show('Á≥ªÁªüÂàùÂßãÂåñÂ§±Ë¥•', 'error', 5000);
        }
    }

    setTimeout(init, 1000);
})();